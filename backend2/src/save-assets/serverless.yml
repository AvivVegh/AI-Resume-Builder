service: am-save-assets
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-newrelic-lambda-layers

provider:
  name: aws
  runtime: ${file(../../serverless.config.${opt:stage}.yml):runtime}
  memorySize: ${file(../../serverless.config.${opt:stage}.yml):memorySize}
  region: ${file(../../serverless.config.${opt:stage}.yml):region}
  deploymentBucket:
    name: ${file(../../serverless.config.${opt:stage}.yml):deploymentBucket}
    serverSideEncryption: AES256
  vpc: ${file(../../serverless.config.${opt:stage}.yml):vpc}
  environment: ${file(../../serverless.config.${opt:stage}.yml):environment}
  stage: ${file(../../serverless.config.${opt:stage}.yml):stage}
  role:
    Fn::ImportValue: ${self:provider.stage}-gateway-LambdaExecutionIamRole
  deploymentMethod: direct

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:provider.stage}-gateway-RestApiId
    restApiRootResourceId:
      'Fn::ImportValue':
        ${self:provider.stage}-gateway-RootResourceId
        # restApiResources:
    #   /assets:
    #     'Fn::ImportValue': MyApiGateway-assetsPath

package:
  patterns:
    - ../../node_modules

custom:
  tenantId: ${file(../../serverless.config.${opt:stage}.yml):tenantId}
  authorizer:
    type: CUSTOM
    authorizerId:
      Fn::ImportValue: ${self:provider.stage}-gateway-AuthorizerId

  webpack:
    webpackConfig: ../../webpack.config.js
    packager: yarn
    includeModules:
      packagePath: ../../package.json
  cors:
    origin: '*'
    headers:
      - tenant
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - user
    allowCredentials: true
  prune:
    automatic: true
    includeLayers: true
    number: 0
  newRelic:
    accountId: ${file(../../serverless.config.${opt:stage}.yml):newRelicAccountId}
    apiKey: ${file(../../serverless.config.${opt:stage}.yml):newRelicApiKey}
    enableFunctionLogs: true

functions:
  saveAssest:
    handler: ./handler.handler
    events:
      - http:
          path: /save
          method: post
          authorizer: ${self:custom.authorizer}
          cors: ${self:custom.cors}
