service: airb-gateway

# plugins:
#   - serverless-webpack

# custom:
#   webpack:
#     webpackConfig: ../../webpack.config.js
#     packager: npm
#     includeModules:
#       packagePath: ../../package.json

provider:
  name: aws
  stackName: ${self:service}-${file(../../serverless.config.${opt:stage}.yml):stage}
  deploymentBucket:
    name: ${file(../../serverless.config.${opt:stage}.yml):deploymentBucket}
    serverSideEncryption: AES256
  # vpc: ${file(../../serverless.config.${opt:stage}.yml):vpc}
  timeout: ${file(../../serverless.config.${opt:stage}.yml):timeout}
  runtime: ${file(../../serverless.config.${opt:stage}.yml):runtime}
  memorySize: ${file(../../serverless.config.${opt:stage}.yml):memorySize}
  versionFunctions: ${file(../../serverless.config.${opt:stage}.yml):versionFunctions}
  tracing: ${file(../../serverless.config.${opt:stage}.yml):tracing}
  region: ${file(../../serverless.config.${opt:stage}.yml):region}
  # environment: ${file(../../serverless.config.${opt:stage}.yml):environment}
  stage: ${file(../../serverless.config.${opt:stage}.yml):stage}
  deploymentMethod: direct

functions:
  authorizer:
    timeout: 30
    handler: index.authorize

resources:
  Resources:
    AMApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}

    GatewayIamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-IamPolicy
        Roles:
          - Ref: GatewayIamRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
              Resource: arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}*:*
            - Effect: Allow
              Action:
                - logs:PutLogEvents
              Resource: arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}*:*:*
            - Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource:
                - arn:aws:execute-api:*:*:**/@connections/*
            - Effect: Allow
              Action:
                - 'sqs:*'
              Resource:
                - '*'

    GatewayIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          {
            'Version': '2012-10-17',
            'Statement':
              [
                {
                  'Effect': 'Allow',
                  'Principal': { 'Service': 'lambda.amazonaws.com' },
                  'Action': 'sts:AssumeRole',
                },
              ],
          }
        RoleName: ${self:service}-${self:provider.stage}-IamRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/CloudWatchEventsBuiltInTargetExecutionAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          - arn:aws:iam::aws:policy/service-role/CloudWatchEventsInvocationAccess
          - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/CloudWatchEventsFullAccess
          - arn:aws:iam::aws:policy/AWSLambda_FullAccess
          - arn:aws:iam::aws:policy/RDSFullAccess

        # Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 0
        AuthorizerUri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: 'AuthorizerLambdaFunction.Arn'
              - '/invocations'
        IdentitySource: method.request.header.Authorization
        IdentityValidationExpression: 'Bearer .+'
        RestApiId: { Ref: AMApiGateway }
        Type: TOKEN
        Name: ${self:provider.stage}-gateway-authorizer

    ApiGatewayAuthorizerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: AuthorizerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join: ['', ['apigateway.', { Ref: 'AWS::URLSuffix' }]]

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: { Ref: AMApiGateway }

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: { Ref: AMApiGateway }

  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: AMApiGateway
      Export:
        Name: ${self:provider.stage}-gateway-RestApiId

    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - AMApiGateway
          - RootResourceId
      Export:
        Name: ${self:provider.stage}-gateway-RootResourceId

    apiGatewayAuthorizerId:
      Value:
        Ref: ApiGatewayAuthorizer
      Export:
        Name: ${self:provider.stage}-gateway-AuthorizerId

    LambdaExecutionIamRole:
      Value:
        Fn::GetAtt: [GatewayIamRole, Arn]
      Export:
        Name: ${self:provider.stage}-gateway-LambdaExecutionIamRole
